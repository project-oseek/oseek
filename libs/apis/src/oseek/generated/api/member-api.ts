/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { MemberInfoResDto } from '../models';
// @ts-ignore
import { MemberModifyReqDto } from '../models';
/**
 * MemberApi - axios parameter creator
 * @export
 */
export const MemberApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 맴버 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMemberInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/member/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 맴버 정보 업데이트
         * @param {MemberModifyReqDto} memberModifyReqDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyMemberInfo: async (memberModifyReqDto: MemberModifyReqDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberModifyReqDto' is not null or undefined
            assertParamExists('modifyMemberInfo', 'memberModifyReqDto', memberModifyReqDto)
            const localVarPath = `/member`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberModifyReqDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberApi - functional programming interface
 * @export
 */
export const MemberApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemberApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 맴버 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findMemberInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberInfoResDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findMemberInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 맴버 정보 업데이트
         * @param {MemberModifyReqDto} memberModifyReqDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyMemberInfo(memberModifyReqDto: MemberModifyReqDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberModifyReqDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyMemberInfo(memberModifyReqDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MemberApi - factory interface
 * @export
 */
export const MemberApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemberApiFp(configuration)
    return {
        /**
         * 
         * @summary 맴버 정보 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMemberInfo(options?: any): AxiosPromise<MemberInfoResDto> {
            return localVarFp.findMemberInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 맴버 정보 업데이트
         * @param {MemberModifyReqDto} memberModifyReqDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyMemberInfo(memberModifyReqDto: MemberModifyReqDto, options?: any): AxiosPromise<MemberModifyReqDto> {
            return localVarFp.modifyMemberInfo(memberModifyReqDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemberApi - object-oriented interface
 * @export
 * @class MemberApi
 * @extends {BaseAPI}
 */
export class MemberApi extends BaseAPI {
    /**
     * 
     * @summary 맴버 정보 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public findMemberInfoAxios(options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).findMemberInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 맴버 정보 업데이트
     * @param {MemberModifyReqDto} memberModifyReqDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public modifyMemberInfoAxios(memberModifyReqDto: MemberModifyReqDto, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).modifyMemberInfo(memberModifyReqDto, options).then((request) => request(this.axios, this.basePath));
    }
}
